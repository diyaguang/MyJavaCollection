第三章 等待和通知

线程间的交互

3.1 等待/通知 API一览

由 wait 、notify，notifyAll 方法组成。 其中 wait方法等待某个条件成立，当条件成立时，notify，notifyAll 方法通知处于等待中的线程。
wait：使当前线程一直处于等待，需要另外的线程调用这个对象的 notify或notiryAll，或等待其他线程中断当前等待的线程。
notify：唤醒等待锁的线程，如果有多条，则随机选择一个，进行唤醒。被唤醒的线程和普通线程一样，没有任何的优势。再次公平获得锁。
notifyAll：唤醒等待锁的全部线程。
如果线程处于 wait状态，那么任意中断该线程的操作，都会抛出 InterruptedException异常，并且中断状态会被清除。所有等待的线程集合必须在同步上下文中，也就是说必须是该锁的等待者。否则会抛出 IllegalMonitorStateException 异常。

说明：在 wait，notify 操作的都是一个对象。比如，在那个线程中调用 xxx.wait 则当前执行的线程被等待，同时释放锁。在其他线程中 xxx.notify 则，等待该对象的线程就被唤醒。

3.2 生产者和消费者
经典的 条件的线程交互。一个线程生产，一个线程消费。生产出来的数据放入到共享的变量中。因线程的速度不同产生先后问题。
解决问题：生产者必须一直等待，直到被通知之前生产的数据项被消费。消费者也一直等待，直到被通知先数据项已经被生产出来了。
使用 wait，notify 可以完成相关的操作。

