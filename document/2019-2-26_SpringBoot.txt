10.2.3.1 RestTemplate
核心类，提供了所有访问 REST服务的接口，提供了 RESTful 风格的API
DELETE -> delete
GET -> getForObject,getForEntity
HEAD -> headForHeaders
OPTIONS -> optionsForAllow
POST -> postForObject,postForLocation
PUT -> put
其他 -> exchange（通用）

SpringBoot 提供了 RestTemplateBuilder 来创建一个 RestTemplate

@Controller
@RequestMapping("/api")
public class AipController {
    @Autowired
    RestTemplateBuilder restTemplateBuilder;

RestTmeplate client = restTemplateBuilder.build();
Order order = client.getForObject(uri,Order.class,orderId);
其中参数既可以是数组，也可以是MAP，

可以使用 client.getForEntity方法，获取返回的 HTTP头信息，返回 ResponseEntity中包含了头信息
ResponseEntity<Order> responseEntity = client.getForEntity(uri,Order.class,orderId);
Order order = responseEntity.getBody();
HttpHeaders headers = responseEntity.getHeaders();

调用 POST方法可以使用 postForObject() 方法：
String ret = client.postForObject(uri,order,String.class);  第二个参数时 HttpEntity或POJO，POJO会自动转化为 HttpEntity。第三个参数为期望的放回类型。
HttpEntity<Order> body = new HttpEntity<Order>(order);  这个作为第二个参数传入即可。好处是可以提供额外的HTTP头信息

如果返回类型是一个列表，LIST，则不能简单调用 xxxFroBoject，泛型会存在类型擦除的。RestTemplate在反序列化时候，并不知道实际反序列化的类型，可以使用 ParameterizedTypeReference来包含泛型类型。
ParameterizedTypeReference<List<Order>> typeRef = new ParameterizedTypeReference<List<Order>>{};
ResponseEntity<List<Order>> rs = client.exchange(uri,HttpMethod.GET,body,typeRef,offset);
List<Order> order = rs.getBody();
其中：typeRef定义是用{}结束的，typeRef保留了期望返回的泛型List。exchange 是一个基础的 REST调用接口，需要指明 HTTP Method
或者通过 getForObject方法先映射为 String，然后通过 ObjectMapper 来转换为指定类型。

10.2.3.2 定制 RestTemplate
创建一个配置类，实现接口 RestTemplateCustomizer 中的 customize 方法
（略） P253


10.3 Swagger UI
这是一个工具，用来描述 RESTful 接口，通过 SwaggerUI来显示和测试 RESTFul 接口
其是通过一个 JSON文件来描述。

10.3.1 集成 Swagger
Swagger提供了一组静态页面，在 SpringBoot中集成这些静态页面，直接访问静态页面，指定打开 Swagger规范，就可以显示 RESTFul接口
到 Swagger官网，下载 产品，解压后，找到 dist目录，在工程中创建 statics目录，并创建 swagger3目录，赋值dist目录下的所有文件到 swagger3下
在站点下，访问 xxx/swagger3/index.html 
选定指定的 xxx.json 连接地址，获取 Swagger Petstore 的接口规范作为后续参考。

10.3.2 Swagger规范
规范是一个 JSON格式的文件，包含项目基本信息以及接口描述信息，例如在 static/swagger3下创建一个 sample.json 文件
{
  "swagger": "3.0",
  "info": {
    "description": "这是一个项目简单实例",
    "version": "1.0",
    "title": "某系统接口"
  },
  "basePath":"/api/v1",
  "consumes": [
    "application/x-www-form-urlencode"
  ]
}
其中：swagger总是规范的第一个属性，info 描述一个项目基本信息。basePath指的是 RESTFul接口的实际地址，consumes指提交的内容是表单。

10.3.3 接口描述
接口描述以 path 开示，包含多个路径，每个路径 可以有 get，post，put 等 HTTP Method 协议内容
"paths": {
    "/order/{orderId}": {
      "get": {
        "summary": "获取订单详细信息",
        "description": "传入订单编号，获取订单信息",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "订单 id",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "获取用户信息成功"
          }
        }
      }
    }
  }
  其中：summary 接口主要功能的简要描述，description 接口详细描述，parameters 接口的参数（query，path，body，formData，parameter等），response 对应了 HTTP status的提示信息。

  10.3.4 查询参数描述
/order?offset=0  这样的 in 类型就是 query，也就是 url参数

10.3.5 URI中的查询
/order/{orderId}  in类型使用 path

10.3.6 HTTP 头参数
in 的类型使用 header
{
	"name":"X-Request-ID",
	"description":"",
	"in":"header"
}

10.3.7 表单参数
使用 application/x-www-form-urlencoded 提交的参数，in 的类型使用   formData

10.3.8 文件上传参数
in 的类型使用 file，同时需要增加 type属性，
{
	"in":"formData",
	"type":"file"
}

10.3.9 整个请求体作为参数
通常是将 JSON数据作为 HTTP内容体发送到服务器端，in 的类型使用 body
{
	"parameters":[
		{
			"name":"order",
			"in":"body",
			"schema":{
				"$ref":"#/definitions/order"
			}
		}
	]
}
其中 name是可选的，schema是可选的，说明了 body 的格式，$ref 表示 body 格式规范定义在其他地方“/definitions/order”  ，参考了 definitions下的 order 属性
"definitions":{
	"order":{
		"type":"object",
		"properties":{
			"id":{
				"type":"string"
			},
			"name":{
				"type":"string"
			}
		}
	}
}


10.4 模拟 REST 服务
SwaggerUI 提供了 客户端调用工具，可以通过 WebSimulate 来模拟实现（WebSimulate 是 Beetl 包下的工具）
WebSimulate将代理这一请求，会在 resources/templates/values 目录下寻找匹配的 Beetl脚本文件执行并返回
(略)



第十一章 MongoDB
（略）


第十二章 Redis
可用作数据库来存储 Key-Value 数据，支持 字符串、哈希表、列表、集合、有序集合、位图、地理空间信息等数据类型。
同时可以作为 高速缓存和消息队列代理

12.1 安装 Redis
参见 OneNote笔记中的安装命令

12.2 使用 redis-cli
Redis共有 14个命令组，两百多个命令。进入 src目录，运行 ./redis-server 进入命令行
redis-cli 客户端命令行工具

12.2.1 安全设置
在 redis.conf 文件中，添加密码：  requirepass Redis!123
在使用客户端连接 redis 后，执行命令，会要求必须授权操作： author "Redis!123"  执行这个命令

12.2.2 基本操作
set 命令，添加内容（格式：set key value）  set platform:info "simple infomation"
get 命令，根据key，获取内容。
mget 命令，获取多个 key的内容

数字类型的字符串，进行算数操作：
DECR/INCR
DECRBY/INCRBY
INCRBYFLOAT

命令：incrby platform:varsion 2    执行后，返回 (integer)3

12.2.3 keys
Key 是二进制数，字符串和图片都可以作为 key，通过 keys命令来查询 Redis中所有的 key
命令：keys platform:*
可以使用通配符 “*” 或 “？”
通过 exist 来判断 Key是否存在：exists platform:info
通过 del 命令来删除：del platform:info
其中 del，exist 可以放多个 key，用空格分开

key可以设定超时时间，通过 expire 指定多少秒后自动删除：expire platform 10
使用 ttl 命令查看 key 的存活时间：ttl platform

12.2.4 Redis List
Redis中的 List，类似 Java中的 LinkedList，通过链表完成，添加元素很快，按照索引方式获取元素较慢。
rpush命令：尾部插入值
lpush命令：头部插入值
lrange命令：从左到右显示指定范围的列表，





