第一章 JavaEE 简介

1.1 JavaEE
1.1.1 JavaEE 架构
JavaEE是一种企业应用的软件架构。功能：Web支持，事务支持，消息服务，数据持久层，Container
JWS：分布式系统交互的一种方式，是Java实现的一种 WebService
JAX-RS：JEE6的技术，通过 REST交互
JNDI：查找服务和对象的接口，如果查找一个配置好的数据源
JAXP/JAXB：解析和绑定JavaBean 的XML工具
JAX-REC：分布式系统交互的一种方式，通过 RPC调用
JACC：安全认证
Java EE Application Server：提供上述服务的Web服务器，Tomcat，Resin只算是 JavaEEWeb服务器，开源的 JBoss，weblogin等称为应用服务器

1.1.2 Java EE 的缺点
过于复杂，过于追求分布式，成本高价格不菲，不能及时与流行开源技术结合。

1.2 Spring
吸取了JavaEE容器管理的有点，提供了一个 IoC容器来关闭Bean，通过 AOP方式来增强Bean的功能，Spring提供了两种机制，控制反转IoC和面向切面AOP，来提供任意的服务和增强Bean的任意特征。

1.2.1 Spring IoC容器和AOP
依据注解或配置文件，对 Objects进行管理和增强
IoC Core Container：Spring Container负责管理任意对象，结合你对对象的描述进行初始化和加强。
Spring提供了一些注解 @Collection，@Service，@Component，@Configuration，只有使用这些注册的类才会引起Spring容器的注意，并根据注解含义来管理和增强对象。
Spring可以管理和增强任意对象，Spring Container往往会增强这类对象的事务控制能力。
容器管理还可以为被管理的Bean提供其他被管理和被增强的Bean，使用 @Autowired 自动注入。

AOP：面向切面编程，通过预编译方式或运行时刻对目标对象动态第添加功能。AOP分离了企业应用的业务逻辑和系统级服务。

1.2.2 Spring的缺点
使用门槛贵过高，对过时技术兼容，XML不再是流行的系统配置方式。集成第三方的时候，考虑工具的兼容性。系统启动慢，不具备热部署功能。

1.3 Spring Boot
SpringBoot 管理Spring容器，第三方插件，并提供很多默认系统级的服务。通过 starter 来提供系统级服务，Spring Boot 提供了一些列 Starter，并且可以自己开发 Starter
，使用时需要在 Maven中的 Pom中进行配置即可。 例如：spring-boot-starter-web
优点：
实现约定大于配置，提供了内置的 Tomcat或Jetty容器，通过依赖的jar包管理，自动装配技术，容易支持与其他技术体系，工具集成。支持热加载，开发体验好。

1.4 Hello，Spring Boot
 （参看代码）
 在SpringBoot中编写的类，建议启用程序的包名层次最高，其他类均在栖霞，这样Spring Boot 默认自动所有启动程序之下的所有类。

 1.4.4 使用热部署
 SpringBoot 提供了 spring-boot-devtools 能在修改类或配置文件的时候自动重新加载 Spring Boot 应用。

 1.4.5 添加REST支持
 使用 @RestController 注解，组合了 @Controller 和 @ResponseBody

 第二章 Spring Boot 基础

 2.1 检查Java环境与安装Java

 2.2 安装和配置Maven

 2.2.1 Maven介绍
 
