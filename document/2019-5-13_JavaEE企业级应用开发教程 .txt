第十章 MyBatis与 Spring的整合

10.-1 Spring+SpringMVC+Mybatis 整合
SSM：

10.-2 Spring 与 MyBatis整合


10.1 整合环境搭建

10.1.1 准备 所需JAR包
其中，MyBatis与 Spring整合的中间 JAR，MyBatis社区自己开发了一个用于整合这两个框架的中间件 -- MyBatis-Spring
数据源所需的 JAR包，可能还有 DBCP 和 连接池的 JAR包，例如：commons-dbcp2-2.1.1.jar    commons-pool2.2.4.2.jar

10.1.2 编写配置文件
编写 db.properties 文件，主要对数据库的信息的配置文件。
编写 applicationContext.xml 文件，其中读取 db.properties 配置未见，配置 bean 等信息来配置 spring <context:property-placeholder location="classpath:db.properties"/ > 来读取数据库配置信息，在 xml 中进行引用，编写 sqlSessionFactory 的 bean的配置，注入数据源等信息，注入mybatis-config.xml 文件的地址等信息。
编写 mybatis-config.xml 文件，设置 typeAliases 和 mappers 元素来进行 mybatis 的配置
编写 log4j.properties 文件，配置 mybatis用到的日志信息配置

10.2 传统DAO方式开发整合
需要编写DAO接口以及接口的实现类，需要向DAO实现类中注入 SqlSessionFactory，然后在方法体内通过 SqlSessionFactory创建 SqlSession，通过使用 mybatis-spring 包中提供的 SqlSessionTemplate 或 SqlSessionDaoSupport 类来实现。
SqlSessionTemplate：核心类，管理 SqlSession。
SqlSessionDaoSupport：抽象类，继承了 DaoSupport类，主要用作 DAO的基类来使用。通过 SqlSessionDaoSupport类的 getSqlSession 方法来获取所需的 SqlSession。

其中在实现 xxxDao类中，会继承 SqlSessionDaoSupport类，并实现 xxxDao 接口。SqlSessionDaoSupport有一个 SqlSessionFactory属性需要注入，然后在方法中就可以使用 SqlSession了。
<bean id="customerDao" class="com.xxx.xxx.impl.CustomerDaoImpl">
	<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
</bean>

10.3 Mapper 接口方式的整合

10.3.1 基于 MapperFactoryBean 的整合
使用 MapperFactoryBean核心类，根据 Mapper接口生成 Mapper对象的类。可以设置 mapperInterface，SqlSessionFactory，SqlSessionTemplate 等属性，用来配置相关信息。
Mapper接口编程方式需要程序员编写 Mapper接口，然后由 MyBatis框架根据接口的定义创建接口的动态代理对象。
1.创建 xxxMapper接口文件，包含定义要操作的方法
2.创建对应的 xxxMapper.xml 文件
3.在 MappingConfig.xml文件中指定映射 xxxMapper.xml 文件
4.在 Spring的配置文件中，配置 Bean
<bean id="customerMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
	<property name="mapperInterface" value="com.xxx.mapper.CustomerManager"/>
	<property name="sqlSessionFactory" ref="sqlSessionFactory" />
</bean>

注意事项：
1.Mapper接口的名称和对应的 mapper.xml 映射文件的名称必须一致
2.Mapper.xml 文件中的 namespace 与 Mapper 接口的类路径相同
3.Mapper接口中的方法名 和 mapper.xml 中定义的每个执行语句的 id 相同
4.Mapper接口中方法输入参数类型和 Mapper.xml 中定义的每个SQL的 parameterType 的类型相同
5.Mapper 接口方法的输出参数要和 Mapper.xml 中定义的每个 SQL 的 resultType 的类型相同

10.3.2 基于 MapperScannerConfigurer的整合
MyBatis-Spring 团队提供了一种自动扫描来配置 MyBatis 中的映射器，采用 MapperScannerConfigurer类
常用配置属性：
basePackage：指定映射接口文件所在的包路径，当需要扫描多个包时，使用分号或逗号分隔
annotationClass：指定要扫描的注解名称，只有被注解标示的类才会被配置为映射器
sqlSessionFactoryBeanName：指定在 Spring中定义的 SqlSessionFactory的 Bean名称
sqlSessionTemplateBeanName：指定在 Spring中定义的 SqlSessionTemplate的Bean名称
markerInterface：指定创建映射器的接口
通常情况下，只指定 basePackage属性即可。

10.4 测试事务
MyBatis+Spring 项目中，事务时由 Spring 来管理的，业务层Service 即是处理业务的地方，又是管理数据库事务的地方。

第十一章 Spring MVC 入门

11.1 Spring MVC 概述
与 Struts2框架一样，都属于 MVC框架，提供了一个前端控制器 DispatcherServlet，使开发人员无需额外开发控制器对象。
使用基于 XML的配置文件

11.2 一个普通的 Spring MVC应用
1.创建项目，引入 JAR包。添加 Spring4个核心 JAR包，commons-logging 的 JAR，以及两个 Web相关的 JAR
2.在 web.xml 中，配置 Spring MVC的前端控制器 DispatcherServlet，配置 servlet-mapping 元素
3.创建 Controller类
4.创建 SpringMVC的配置文件，配置控制器映射信息
5.创建视图 View页面

11.3 SpringMVC的工作流程
1.请求会被 SpringMVC 的 前端控制器 DispatcherServlet所拦截
2.DispatcherServlet拦截请求后，会调用 HandlerMapping处理器映射器
3.处理器映射器根据请求 URL找到具体的处理器，生成处理器对象以及处理器拦截器，一并返回给 DispatcherSAervlet
4.DispatcherServlet 会通过返回信息选择合适的 HandlerAdapter
5.HandlerAdapter 会调用并执行 Handler，这里的处理器就是 Controller类，也被称为 后端控制器
6.Controller执行完毕后，返回一个 ModelAndView对象，对象中包含视图名或包含模型和视图名
7.HandlerAdapter 将 ModelAndView对象返回给 DispatcherServlet
8.DispatcherServlet 会根据 ModelAndView 对象选择一个合适的 ViewReslover（视图解析器）
9.ViewReslover解析，会向 DispatcherServlet中返回具体的 View
10.DispatcherServlet 对 View进行渲染
11.视图渲染结果会返回给客户端浏览器显示



第十二章 Spring MVC的核心类和注解

12.1 DispatcherServlet
是前端控制器的角色，只需将其配置在项目的web.xml文件中，配置 servlet 元素，将 DispatcherServlet配置进去，并且配置 servlet-mapping 设置映射目录
默认会到 WEB-INF目录下寻找配置文件，使用 servletName-servlet.xml 的格式寻找配置文件。

12.2 Controller 注解类型
在 Spring中，保证找到控制器类，需要在 Spring MVC 的配置文件中，添加相应的扫面配置信息。
1.在配置文件的声明中，引入 spring-context
2.使用 <context:component-scan> 元素，指定需要扫描的类包
例如：<context:component-scan base-package="com.itheima.controller" />
在使用注解的方式时，需要依赖 Spring 的 AOP包，需要添加相应的jar包

12.3 RequestMapping 注解类型

12.3.1 @RequestMapping 注解的使用
该注解用于映射一个请求或一个方法，可以标注在一个方法或一个类上。

12.3.2 @RequestMapping注解的属性
name：为映射地址指定别名
value：默认属性，用于映射一个请求和一种方法
method：指定该方法用于处理那种类型的请求，包括 GET，POST，HEAD，OPTIONS，PUT，PATCH，DELETE，TRACE
params：指定 Request中必须包含某些参数的值，才可以通过其标注的方法处理
headers：指定 Request中必须包含某些指定的  header的值，才可以通过其标注的方法处理
consumes：指定处理请求的提交内容类型 content-type ，例如：application/json，text/html 等
produces：指定返回的内容类型，必须是 request请求头 Accept中所包含的类型

12.3.3 组合注解
在 spring 框架的 4.3 版本后，增加了组合注解，简化常用的 HTTP方法的映射
@GetMapping：匹配 GET方式的请求
@PostMapping：匹配 POST方式的请求
@PutMapping：匹配 PUT方式的请求
@DeleteMapping：匹配 DELETE方式的请求
@PatchMapping：匹配 PATCH方式的请求

12.3.4 请求处理方法的参数类型和返回类型
方法参数可以出现的类型：
HttpServletRequest，HttpServletResponse，HttpSession，WebRequest，NativeWebRequest，Locale，TimeZone，ZoneId，InputStream，Reader，OutputStream，Writer，HttpMethod，Principal，@PathVariable，@MatrixVariable，@RequestParam，@RequestHeader，@RequestBody，@RequestPart，@SessionAttribute，@RequestAttribute，HttpEntity<?>，Map，ModelMap，RedirectAttributes，BindingResult，SessionStatus，UriComponentsBuilder
其中：Model类型 不是一个 ServletAPI类型，而是一个包含了 Map对象的 SpringMVC类型

请求方法可返回的类型：
ModelAndView，Model，Map，View，String，void，HttpEntity<?>，ResponseEntity<?>，Callable<?>，DeferredResult<?>
其中 ModelAndView 可以添加 model数据并指定视图

特殊的处理：
1.redirect 重定向
Url地址栏会发生变化，独立的 Request请求。使用时  return "redirect:queryUser"
2.forward 请求转发
Url地址栏不会发生变化，共享 Request，Response对象。使用时： return "forward:editUser"

12.4 ViewResolver （视图解析器）
负责解析视图，通过在 配置文件xml 中定义一个 ViewResolver来配置视图解析器
<bean id="viewResolver" class="xxx.xxx.xxx.view.InternalResourceViewResolver">
	<property name="prefix" value="/WEB-INF/jsp/"/>
	<property name="suffix" value=".jsp"/>
</bean>


第十三章 数据绑定
