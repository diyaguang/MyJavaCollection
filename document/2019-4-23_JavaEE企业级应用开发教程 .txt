3.3 基于代理类的 AOP实现
Spring中的 AOP代理默认使用JDK动态代理的方式实现的。使用 ProxyFactoryBean是创建AOP代理的最基本方式。

3.3.1 Spring 的通知类型
按照在目标类方法的连接点位置，可以分为五种类型
1.MethodInterceptor：环绕通知类型
2.MethodBeforeAdvice：前置通知
3.AfterReturningAdvice：后置通知
4.ThrowAdvice：异常通知
5.IntroductionInterceptor：引介通知

3.3.2 ProxyFactoryBean
是 FactoryBean接口的实现类，负责为其他Bean创建代理实例。使用 ProxyFactoryBean是创建 AOP代理的基本方式。
常用属性：
target：代理的目标对象
proxyInterfaces：代理要实现的接口，如果多个接口，可食用 list 格式赋值
interceptorNames：需要织入目标的 Advice
singleton：返回的代理是否为单实例，默认为 true
optimize：当设置为 true时，强制使用 CGLIB

具体使用：
public class MyAspect implements MethodInterceptor {

    @Override
    public Object invoke(MethodInvocation mi) throws Throwable{
        check_Permissions();
        Object obj = mi.proceed();  //执行目标方法
        log();
        return obj;
    }
    public void  check_Permissions(){
        System.out.println("模拟检查权限...");
    }
    public void log(){
        System.out.println("模拟记录日志...");
    }
}
创建一个切面类，使用环绕通知的话，需要实现 MethodInterceptor接口，实现其 invoke 方法。
在配置文件中配置：applicationContext.xml
<bean id="userDao" class="com.dygstudio.studyspring.jdk.UserDaoImpl"/>
    <!-- 切面类 -->
    <bean id="myAspect" class="com.dygstudio.studyspring.factorybean.MyAspect"/>
    <!-- 使用 Spring代理工厂定义一个名称为 userDaoProxy 的代理对象 -->
    <bean id="userDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!-- 指定代理实现的接口 -->
        <property name="proxyInterfaces" value="com.dygstudio.studyspring.jdk.UserDao"/>
        <!-- 指定目标对象 -->
        <property name="target" ref="userDao"/>
        <!-- 指定切面，植入环绕通知 -->
        <property name="interceptorNames" value="myAspect"/>
        <!-- 指定代理方式，true使用 cglib，false默认，使用jkd 动态代理 -->
        <property name="proxyTargetClass" value="true"/>
    </bean>
说明：通过 <bean> 元素定义了目标类和切面，通过使用 ProxyFactoryBean类定义了代理对象，分别通过 <property>子元素指定了代理实现的接口，代理的目标对象，需要织入目标类的通知以及代理方式。
具体调用方式：
public static void test(){
        String xmlPath = "com/dygstudio/studyspring/factorybean/applicationContext.xml";
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(xmlPath);
        UserDao userDao = (UserDao)applicationContext.getBean("userDaoProxy");
        userDao.addUser();
        userDao.deleteUser();
    }

3.4 AspectJ 开发
基于Java的AOP框架，Spring2.0 后，SpringAOP引入了对 AspectJ的支持，并允许直接使用 AspectJ编程，AOP API也尽量与 AspectJ保持一致，Spring框架也建议使用 AspectJ来开发AOP，使用有两种方式：一种基于XML声明式的，一种是基于注解的。

3.4.1 基于 XML的声明式 AspectJ
通过 XML文件来定义 切面，切入点及通知，所有切面，切入点和通知都必须定义在 <aop:config>元素内
Spring的 配置文件中可以包含多个 <aop:config>元素，一个元素中又可以包含属性和子元素，子元素包括<aop:pointcut>,<aop:advisor>和<aop:aspect> ，这三个子元素必须按照这个顺序来定义。<aop:aspect>元素下同样包含了属性和多个子元素，通过使用 <aop:aspect> 元素及其子元素就可以在XML文件中配置切面，切入点和通知。
method：指定切面中国呢的增强方法名称
pointcut-ref：指定切入点为切点的Id的引用
1.配置切面
使用 <aop:aspect> 元素，将一个定义好的 SpringBean转换成切面 Bean，然后通过 ref属性引用该 Bean。
常用的 id 和 ref 属性
2.配置切入点
使用 <aop:pointcut> 元素来定义，当作为 aop:config 子元素时，为全局切入点。当作为 aop:aspect 子元素时，为针对某一切面的切入点。
常用的 id 和 expression属性。
说明 expression属性：
表达式格式: execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern) throws-pattern?)
modifiers-pattern：表示定义的目标方法的访问修饰符
ret-type-pattern：目标方法的返回值类型
declaring-type-pattern：定义的目标方法的类路径
name-pattern：需要被代理的目标方法
例：execution(* com.xxx.xxx.*.*(..)) 这就是切入点表达式，其中 execution() 是表达式主体，第一个 * 表示返回类型，com.xxx.xxx表示需要拦截的包名，后面第二个 * 表示类名，第三个 * 表示方法名，后面 (..)  表示方法参数，注意：第一个* 与包名之间有一个空格。
3.配置通知
使用 <aop:aspect>的子元素配置通知，这五个子元素必支持使用子元素
通知的常用属性：
pointcut：用于指定一个切入点表达式
pointcut-ref：指定一个已经存在的切入点名称
method：指定一个方法名，指定将切面Bean中的该方法转化为增强处理
throwing：该属性只对 after-throwing 元素有效，指定一个形参名，异常通知方法可以通过该形参访问目标方法所抛出的异常

