第一篇 构建一个个 SpringBoot工程

简化开发，开启各种自动装配，优先于配置的惯例
创建项目后，在其目录下使用 mvn clean , mvn package 命令来执行编译打包，生成对应 war 或 jar 文件使用。

在项目字段中使用 @LocalServerPort  注解，等同与在字段上使用 @Value("${local.server.port}")  表示获取配置文件中指定的项值。

可以在 启动文件上加入如下代码，查看程序启动生成Bean的信息：
@Bean
    public CommandLineRunner commandLineRunner(ApplicationContext ctx){
        return args -> {
            System.out.println("Let's inspect the beans provided by Spring Boot:");
            String[] beanNames = ctx.getBeanDefinitionNames();
            Arrays.sort(beanNames);
            for(String beanName:beanNames){
                System.out.println(beanName);
            }
        };
    }


第二篇 Spring Boot 配置文件详解

1.自定义属性
@Value("${属性名}")  这样的获取方式，例 @Value("${my.name}")

2.将配置文件的属性赋给实体类
在配置文件中，配置前缀，放入配置数据
在配置文件中，可使用 ${random} 这个对象，用来在配置文件中的值的预处理
首先我们创建一个 Bean
使用注解 @ConfigurationProperties(prefix="my")
              @Component  //这个注解可写，可不写

 另外 org.springframework.boot    spring-boot-configuration-processor   这个 POM依赖，可引可不引

 在应用类或 application类砂锅，加上 @EnableConfigurationProperties({ConfigBean.class}) 注解

3.自定义配置文件
创建 自定义配置文件，例如 my.properties
com.dygstudio.name=dygstudio
com.dygstudio.age=36

编写一个 JavaBean类，使用如下注解
@Configuration
@PropertySource(value="classpath:my.properties")
@ConfigurationProperties(prefix = "com.dygstudio")

在使用的类上加上 @EnableConfigurationProperties({ConfigBean.class,User.class})  //在实际使用中，这个注解可以不写
@Autowired
MyConfigBean myConfigBean;
@RequestMapping(value = "/myConfig")
public String testMyConfig(){
    return myConfigBean.getName() +">>>>>"+myConfigBean.getAge();

4.多环境配置文件
使用格式 application-{profile}.properties

在application.yml 中配置：
spring:
    profiles:
        active: dev

这样启动后，就shying application-dev.properties 配置文件了


第三章 SpringBoot 用 JdbcTemplates 访问 MySQL

第四章 SpringBoot 整合 JPA

第五章 SpringBoot 整合 beatlsql（略，参看之前的教程）

第六章 SpringBoot 整合 myBatis

第七章 SpringBoot 开启声明式事务

第八章 SpringBoot 整合 mongodb（略）

第九章 SpringBoot 整合 Redis

第十章 用 Spring Restdocs 创建 API 文档（略）

第十一章 SpringBoot 集成 swagger2 构建

第十二章 SpringBoot 集成 apidoc （略） 非常的漂亮

第十三章 SpringBoot 集成 spring cache

第十四章 在 SpringBoot 中使用 redis 实现消息队列

第十五章 SpringBoot 整合 RabbitMQ

第十六章 用 restTemplate 消费服务

第十七章 上传文件（丫的就截取了一段，从网上补全的代码）

第十八章 定时任务 Scheduling Tasks

第十九章 验证表单信息

第二十章 处理表单提交
在 Controller中，
@PostMapping("/greeting")
public String greetingSubmit(@ModelAttribute Greeting greeting){
    return "result";
}
就是提交时，表单为一个对象，提交时字段值自动绑定，然后作为一个对象提交给后台处理
Html页面：
<form action="#" th:action="@{/greeting}" th:object="${greeting}" method="post">
    <input type="text" th:field="*{id}"/>
    <input type="text" th:field="*{content}"/>
这样页面提交后的内容就作为 greeting对象，Post给后台

第二十一章 Springboot 集成 JMS （略）

第二十三章 异步方法
1.引入相关的依赖：
com.fasterxml.jackson.core
jackson-databind
引入 jackson 序列化的 对应类库，（JSON）

2.创建接收数据的实体 

3.使用 RestTemplate 来进行 访问。在指定的方法上标记 @Async 注解，表示这是异步方法。
@Async
public Future<User> findUser(String user) throw InterruptedException{
    ........
    return new AsyncResult<>(results);
}

4.开启异步任务支持
@EnableAsync 注解方法 Application 启动项目上，来开启对异步任务的支持，并且要继承 AsyncConfigurerSupport类

@SpringBootApplication
@EnableAsync
public class Application extends AsyncConfigurerSupport{
    @Override
    public Executor getAsyncExecutor(){
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();   //创建线程池
        executor.setCorePoolSize(2);
        executor.setMaxPoolSize(2);
        executor.setQueueCapacity(500);
        executor.setThreadNamePrefix("GithubLookup-");
        executor.initialize();
        return executor;
    }
}

5.测试代码
@Component
public class AppRunner implements CommandLineRunner{
    
}

第二十四章 Springboot 整合 docker （略）

第二十五章 2小时学会 SpringBoot（略）


