3.10 原子操作：stomic
使用这个关键字是不会阻塞线程的，线程安全的加强版的 volatile原子操作。在 java.util.concurrent.atomic 包里，是一批原子处理类。
基本类型：AtomicInteger，AtomicLong，AtomicBoolean
引用类型：AtomicReference，AtomicReference，AtomciStampedRerence，AtomicMarkableReference
数组类型：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray
属性原子修改器：AtomicIntegerFieldUpdater，AtomicLongFieldUpdater，AtomicReferenceFieldUpdater

AtomicXXX 相关主要方法：
get 获取，getAndSet 设置新值，getAndIncremat 自增，getAndDecreaenc 自减，getAndAdd 加上指定的值。
例：AtomicInteger ai = new AtomicInteger(0); 创建时放入初始值。
原理：利用 CPU 的 比较交换和非阻塞算法，有些通过 JVM，为 Java本地调用，允许Java调用其他语言或借助C来调用CPU底层指令实现。

3.11 单例模式的写法
1.普通方式，是线程不安全的。
2.使用 synchronized 可线程安全，但性能是不高的。
3.使用 Synchronized(lock) 即线程安全，新能也好
private static Singleton instance;
private static byte[] lock = new byte[0];
.....
synchronized(lock)
.......
4.使用重入锁 ReentrantLock() 对象，即可线程安全，性能也好
private static Singleton instance;
private static ReentrantLock lock = new ReentrantLock();
lock.lock();
......
lock.unlock();



第四章 线程安全的集合类
Collection -> ( Set -> (CopyOnWriteArraySet) , List -> (CopyOnWriteArrayList, Vector))
Map -> ( ConcurentMap -> (ConcurrentHashMap), Hashtable) 

4.1 java.util.Hashtable
与 HashMap 同样是散列表，存储内容是 Key-Value 方式的。继承与 Dictionary，实现 Map，Cloneable，Serializable 接口
主要参数：初始容量，加载因子
Hashtable中的函数都是“同步”的，是线程安全的，并且其中的元素都不是有序的。key，value 都不可以为 null，其内部实现中，方法都加入了 synchronized 关键字。
主要方法：clear，contains，containsValue，containsKey，elements，entrySet，KeySet，keys，values，get，put，putAll，remove，clone，可以序列化使用

4.2 java.util.concurrent.ConcurrentHashMap
继承与 AbstractMap，实现了 Map，Serializable 接口
是 HashMap 的线程安全版，效率上比 Hashtable 效率更高
原理：内部使用了 锁分离技术，并不是方法锁。多个锁控制对 hash 表的不同部分进行修改。使用 段（Segment）来表示不同部分。一段就是一个小的 hashtable，多个不同的修改发生在不同的段上，就可以并发运行。
主要方法：clear，contains，containsKey，elements，Enumerator，entrySet，keySet，keys，values，get，put，putAll，remove

4.3 java.util.concurrent.CopyOnWriteArrayList
内部使用 ReentrantLock 锁来实现，对元素的操作都是加锁的。
原理：增加元素时，使用 Arrays.copyOf 来拷贝副本，在副本上增加元素，然后改变原引用指向副本。
读操作不加锁，写操作都加锁，是一个线程安全的 List接口实现的。
主要方法：add（末尾添加元素/指定位置添加），addAll，clear，clone，contains，get，isEmpty，Iterator<E>，ListIterator<E>，remove，toArray

4.4 java.util.concurrent.CopyOnWriteArraySet
内部私用 CopyOnWriteArrayList 来存储操作数据，使用了 Java的装饰模式。原理与 CopyOnWriteArrayList 相同。
主要方法：add，addAll，clear，contains，isEmpty，iterator，toArray

4.5 CopyOnWrite 原理
先复制，后写入，最后重新指向。基本原理就是复制同样元素，实现读写分离，读高并发，写时有锁（写时锁的是另外的对象）。读写分离的思想。
写的时候加锁，读的时候不加锁，读的时候还是 复制前的 list，是旧数据。
系统中并没有提供 CopyOnWriteMap ，可以自己去实现。
适用场景：读多写少的并发场景，需要注意 减少扩容开销。减少添加的次数，使用 addBlackList 方法批量添加。
缺点：内存占用问题。数据一致性问题（只能保证最终一致，不保证实时一致）。

4.6 Vector 向量（矢量），队列
内部通过数组保存数据，继承与 AbstractList，实现了 List，RandomAccess，Cloneable 接口
是一个队列 List，实现了 RandmoAccess接口，可以随机访问，还可以通过元素的序号快速获取元素对象。
与 ArrayList 不同，线程安全的，内部使用 synchronized 锁（在方法上的），类似于 Hashtable
主要方法：addElement，clear，clone，contains，firstElement，indexOf，isEmpty，iterator，lastElement，removeElement，toArray

4.7 常用的 StringBuffer 与 StringBuilder
其中，StringBuffer是线程安全的，StringBuilder不是线程安全的。StringBuffer内部使用 synchronized 在方法上上锁。



第二部分 线程并发晋级之高级部分

第五章 多线程之间交互：线程阀

5.1 阻塞队列 BlockingQueue
感念理解：
Queue 队列：先进先出，只允许在前端 front 删除，后端 rear 插入。
Deque 双端队列：两端都可以进出，可以对其进行约束，只从一端进出，就变成了“栈”结构，先进后出。
BlockingQueue 阻塞队列：队列操作，但是队列为空时，回去，会等待队列变为非空后操作。添加元素时，如果队列满，则等待队列直到可用。
常用的方法：
插入：add（抛出异常），offer（返回特殊值），put（一直阻塞），offer（超时退出）
移除：remove（抛出异常），poll（返回特殊值），take（一直阻塞），poll（超时退出）
检查方法：element（抛出异常），peek（返回特殊值），不可用，不可用

异常：IllegalStateException，NoSuchElementException
返回特殊值：插入是否成功，返回true。移除，空返回 null
一直阻塞：一直等待，直到正确或中断退出
超时退出：指定超时时间，会阻塞，直到超过超时时间，线程退出。

BlockingQueue -> DeiayQueue
						-> PriortyBlockingQueue
						-> ArrayBlockingQueue
						-> SynchronousQueue
						-> LinkedBlockingQueue
						-> BlockingDeque -> LinkedBlockingDeque
说明：BlockingQueue不接受 null 元素，会抛出 NullPointerException 异常。null被用作 poll操作失败的警戒值。

5.2 数组阻塞队列 ArrayBlockingQueue
由 Array 支持的有界的阻塞队列。先进先出原则，尾部插入，从头部获取。“有界缓存区”，固定大小的数组来保存元素。不能增加扩容，满数组增加元素，空数组获取元的元素都将阻塞线程。
在内部使用 ReentrantLock 来保证先生安全。

5.3 链表阻塞队列 LinkedBlockingQueue
内部使用 链表的阻塞队列，维护一个数据缓冲队列。满数组增加元素，空数组获取元的元素都将阻塞线程。能高效的并发数据，对生产者和消费者采用了独立的锁来控制数据。默认链表大小为 Integer.MAX_VALUE，接近无限容量大小。
内部使用 reentrantLock 对象来保证线程安全。

5.4 优先级阻塞队列 PriorityBlockingQueue
支持优先级排序，无界阻塞队列。不会阻塞数据生产者，在没有消费数据的情况下，阻塞消费者。内部采用的是公平锁。内部使用 ReentrantLock 锁对象，同步读写操作。
数据存储使用 Object数组 来操作。

5.5 延时队列 DelayQueue
支持延时获取元素的 优先级队列。是无界阻塞队列。队列中的元素必须实现 Delayed 和 Comparable 接口。必须有 compareTo 和 getDelay 方法的存在。在创建时候，可以指定多久才能从队列中获取当前元素。只有在延时期满后才能从队列中提取元素。
使用场景：缓存系统的设计（能从延时队列中获取到元素，表示时间到达了），定时任务调度（从延时队列中获取到的任务都可以执行）。
内部同样适用 ReentrantLock 锁进行线程安全操作。使用 PriorityQueue<E> 来保存对象。

5.6 同步队列 SynchronousQueue
是一个不存储元素的阻塞队列，每一个 put 操作，必须等待一个 take 操作。否则不能继续添加元素。队列本身不存储任何元素。适用于传递的场景。
有两种不同的模式：
1.公平模式：使用公平锁，采用 FIFO队列方式阻塞多余的生产者和消费者。
2.非公平模式：默认模式，使用非公平锁，使用 LIFO队列方式阻塞多余生产者和消费者，如果生产者和消费者处理速度有差异，则很容易出现饥渴的情况。有些生产者或消费者的数据永远都得不到处理的情况发生。
在创建同步队列时，使用 fair 参数来指定使用那种 模式。
常用方法：isEmpty，size，remaining，clear，remove，containsAll，removeAll，retainAll，peek，iterator，toArray

5.7 链表双向阻塞队列 LinkedBlockingDeque
由链表组成的双向阻塞队列。从两端可以操作元素，多线程操作时，效率更高，多了 addFirst，addList，offerFirst，offerLast，peekFirst，peekLast 等方法。插入 add方法等同于 addList，remove等同于 removeFirst。
在初始化时，可以设置初始容量。