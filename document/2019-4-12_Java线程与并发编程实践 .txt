第七章 锁框架
locks 提供了包含多种接口和类的框架，针对条件进行加锁和等待。
同步及低级别的锁：
方法或代码块上标记 synchronized关键字，JVM通过指令 monitors，monitorenter，monitorexit 来支持操作。
每个Java对象都和一个监听器关联，监听器是互斥的构造，阻止多条线程同时在临界区中进行并发操作。在线程可以进入临界区之前，需要锁住监听器。否则一直会阻塞。
处理原理：锁住一个监听器，存在主存中的共享变量的值会被读取到对应的拷贝中，然后存储在线程的工作内存中，离开临界区，线程会释放监听器，共享变量的值会写回主存。这个动作能保证线程使用这些变量最近的值并且不会污染这些值。这个操作称为可见性。 volatile关键字仅仅解决可见性

7.1 锁
使用接口 Lock提供比监听器更加有弹性的锁操作。
lock：获取锁
lockInterruptibly：除非调用线程被中断，否则获取锁，锁不可用会一直等待。
newCondition：返回一个新的绑定到当前锁实例上的 Condition实例
tryLock：试图获取锁，返回 true或false，有超时版本
unlock：释放锁
获得的锁必须释放，同步块是隐式的同步锁操作。同步方法和代码块，隐式的监听锁关联每个对象。当火哥锁被获取，会以相反的顺序释放。
接口 Lock的实现允许使用在不同的作用域中获取、释放锁这样的技术，同时以不同的顺序允许多个锁被获取和释放。块状锁的缺失溢出了发生在同步方法和代码块上的自动释放锁的功能。

7.2 重入锁

7.3 条件
