1.1 为复杂问题域创建软件的挑战
现阶段用于商业应用程序的最流行的软件架构设计模式是 “大泥球”，BBoM模式，随意构造，杂乱无章，凌乱，任意拼贴，毫无头绪的代码丛林。

1.1.1 未使用通用语言创建的代码
分析模型与代码模型之间的转义将会代价高昂且容易出错
分析模型:用于描述一个见软应用程序的逻辑设计与结构。可以由示意图或UML这样的建模语言来表示。


BBoM类似的最初的快速开发通常会获得一定的成功，但是缺乏基于围绕问题域模型的应用程序设计的重视，后续的扩展就会变得棘手。

1.1.3 泥球模式将扼杀开发


当不能充分理解正在处理的业务领域时，软件项目就会失败。在非功能性需求之外创建并维持一个能够满足业务用例的领域的有用软件模型才是难点所在。
你再理解业务领域方面的投入的经历越多，在尝试软件中对其进行建模已解决内在的业务问题时，就会准备的越充分。
问题域： 涉及当前正在构建软件的主题领域。DDD强调的是在致力于为大型复杂业务系统常见软件时专注领域要高于其他一切的需要。
问题域的专家要与开发团队一起工作，以便专注在有助于能够制作出有价值软件的领域区域上。

1.2 领域驱动设计模式如何管理复杂性
DDD能同时应对理解问题域以及创建有助于解决其内在问题的可维护解决防范的挑战

1.2.1 DDD的战略模式
DDD的战略模式会提炼问题域并塑造应用程序的架构
1.提炼问题域以揭示重要之处是什么
开发团队域领域专家会使用分析模式和知识处理来将大的问题域提炼成更具管理性的子域。这一提炼过程会揭示核心子域。
核心子域是产品背后的驱动力，核心子域是保留最大价值以及应用程序成功的关键区域。
对应用程序关键区域的代码质量进行投入将有助于应用程序跟上业务的变化节奏。

2.创建一个模型以解决领域问题
为每一个子域构建一个软件模型以处理领域问题并让软件与业务保持一致。
构建满足业务用例需求的一个抽象体，同时仍保持业务领域的逻辑和规则。


3.使用公共语言开启建模协作
模型师通过领域专家和开发团队的协作来构建的，通信是使用一种称为通用语言（UL）的发展而实现的。
软件模型是通过为其结构和类设计使用UL的相同术语来绑定到分析模型的。

4.将模型与歧义多和损坏隔离
模型位于有界上下文内，它定义了模型的适用性，并确保保留其完整性。较大的模型可以被划分为较小的模型，并在独立的有界上下文内定义。
有界上下文用于形成一个围绕模型的防护边界，以帮助避免软件演变发展为 BBoM

